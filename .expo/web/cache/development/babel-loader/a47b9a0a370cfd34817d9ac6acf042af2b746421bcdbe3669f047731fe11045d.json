{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { Button, CheckBox, Input, Text, ButtonGroup } from '@rneui/themed';\nimport * as Font from 'expo-font';\nimport { useEffect, useState, useCallback } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { StackActions } from '@react-navigation/native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as React from 'react';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport Unorderedlist from 'react-native-unordered-list';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nfunction cacheFonts(_x) {\n  return _cacheFonts.apply(this, arguments);\n}\nfunction _cacheFonts() {\n  _cacheFonts = _asyncToGenerator(function* (fonts) {\n    return fonts.map(function () {\n      var _ref4 = _asyncToGenerator(function* (font) {\n        return yield Font.loadAsync(font);\n      });\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  });\n  return _cacheFonts.apply(this, arguments);\n}\nvar QUESTIONS_SCREEN = \"Questions\";\nvar SUMMARY_SCREEN = \"Summary\";\nexport default function App() {\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentQuestionIndex = _useState2[0],\n    setCurrentQuestionIndex = _useState2[1];\n  var questions = [{\n    \"prompt\": \"Q1: Select the best answer: Who are you?\",\n    \"type\": \"multiple-choice\",\n    \"index\": 0,\n    \"key\": \"0\",\n    \"choices\": [\"It's just me, myself and I\", \"거울 속 비친 넌 누구인가\", \"기대 안에 기대 이 길의 뒤에\", \"All of the above\"],\n    \"correct\": 3\n  }, {\n    \"prompt\": \"Q2: Fill in the blank: Happy ______ day\",\n    \"type\": \"multiple-answer\",\n    \"index\": 1,\n    \"key\": \"1\",\n    \"choices\": [\"Birthday\", \"Death\", \"Best\", \"Worst\"],\n    \"correct\": [1, 3]\n  }, {\n    \"prompt\": \"Q3: Is the following statment true or false?\\n\\n        Sail across the world, this is our time\\n\\n        Stray Kids, STAY or none, we're gonna cross the finish line\\n\\n        No stopping time when all we see are goals in our sights\\n\\n        No turning back, push forward, rise above the light\",\n    \"type\": \"true-false\",\n    \"index\": 2,\n    \"key\": \"2\",\n    \"choices\": [\"True\", \"False\"],\n    \"correct\": 0\n  }];\n  return _jsx(NavigationContainer, {\n    children: _jsxs(Stack.Navigator, {\n      initialRouteName: QUESTIONS_SCREEN,\n      children: [_jsx(Stack.Screen, {\n        name: \"Questions\",\n        component: QuestionsScreen,\n        initialParams: {\n          questions: questions,\n          currentQuestionIndex: currentQuestionIndex\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Summary\",\n        component: SummaryScreen,\n        initialParams: {\n          questions: questions,\n          currentQuestionIndex: currentQuestionIndex\n        }\n      })]\n    })\n  });\n}\nfunction QuestionsScreen(_ref) {\n  var route = _ref.route;\n  var _route$params = route.params,\n    questions = _route$params.questions,\n    currentQuestionIndex = _route$params.currentQuestionIndex;\n  var currentQuestion = questions[currentQuestionIndex];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectChoice = _useState4[0],\n    setSelectChoice = _useState4[1];\n  var _useState5 = useState([0, 1, 2, 3]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedChoices = _useState6[0],\n    setSelectedChoices = _useState6[1];\n  var handleSelectChoice = function handleSelectChoice(value) {\n    setSelectChoice(value);\n  };\n  var handleSelectedChoices = function handleSelectedChoices(value) {\n    setSelectedChoices(value);\n  };\n  var handleNextQuestion = function handleNextQuestion() {\n    setSelectChoice(function (prevSelectChoice) {\n      return [].concat(_toConsumableArray(prevSelectChoice), [selectChoice]);\n    });\n    setSelectChoice(null);\n    if (currentQuestionIndex + 1 < questions.length) {\n      navigation.push(QUESTIONS_SCREEN, {\n        questions: questions,\n        currentQuestionIndex: currentQuestionIndex + 1\n      });\n    } else {\n      navigation.push(SUMMARY_SCREEN, {\n        questions: questions,\n        selectedChoices: selectedChoices\n      });\n    }\n  };\n  var renderQuestion = function renderQuestion(_ref2) {\n    var item = _ref2.item,\n      index = _ref2.index;\n    if (index !== currentQuestionIndex) {\n      return null;\n    }\n    _jsxs(View, {\n      children: [_jsx(Text, {\n        style: styles.heading,\n        children: item.prompt\n      }), _jsx(ButtonGroup, {\n        buttons: item.choices,\n        selectChoice: selectChoice,\n        onPress: function onPress(value) {\n          setSelected;\n        },\n        containerStyle: {\n          marginBottom: 20\n        }\n      }), _jsx(Button, {\n        title: \"Next Question\",\n        testID: \"next-question\",\n        style: styles.button,\n        onPress: handleNextQuestion\n      })]\n    }, index);\n  };\n  return _jsx(SafeAreaView, {\n    children: _jsxs(View, {\n      children: [_jsx(Text, {\n        style: styles.heading,\n        children: currentQuestion.prompt\n      }), _jsx(FlatList, {\n        data: questions,\n        renderItem: renderQuestion,\n        indexExtractor: function indexExtractor(index) {\n          return index.toString();\n        }\n      })]\n    })\n  });\n}\nfunction SummaryScreen(_ref3) {\n  var navigation = _ref3.navigation,\n    route = _ref3.route,\n    exerciseList = _ref3.exerciseList;\n  var _useState7 = useState(0),\n    _useState8 = _slicedToArray(_useState7, 2),\n    count = _useState8[0],\n    setCount = _useState8[1];\n  var currentExercise = route.params;\n  console.log(route.params.exerciseList);\n  var relatedExercise = exerciseList.find(function (ex) {\n    return ex.name === currentExercise.related;\n  });\n  var navRelatedExercise = useCallback(function () {\n    navigation.push(relatedExercise.type === DURATION_EXERCISE ? DURATION_EXERCISE : REPITITION_EXERCISE, {\n      exerciseKey: route.params.key,\n      name: route.params.name\n    });\n  }, [relatedExercise]);\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      style: styles.heading,\n      children: route.params.name\n    }), _jsx(Text, {\n      style: {\n        fontSize: \"3em\",\n        textAlign: 'center',\n        padding: 10\n      },\n      children: count\n    }), _jsx(Button, {\n      title: \"Add\",\n      style: styles.exerciseButton,\n      onPress: function onPress() {\n        return setCount(function (count) {\n          return count + 1;\n        });\n      }\n    }), _jsx(Button, {\n      title: \"Reset\",\n      style: styles.exerciseButton,\n      onPress: function onPress() {\n        return setCount(0);\n      }\n    }), _jsx(Button, {\n      title: \"Home\",\n      style: styles.exerciseButton,\n      onPress: function onPress() {\n        return navigation.goBack();\n      }\n    }), _jsx(Text, {\n      children: \"Related Exercise:\"\n    }), _jsx(Button, {\n      title: relatedExercise.name,\n      style: styles.button,\n      onPress: navRelatedExercise\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  horizontal: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    padding: 10\n  },\n  button: {\n    alignItems: 'center',\n    padding: 10\n  },\n  buttonGroup: {\n    backgroundColor: \"#2089dc\",\n    color: \"white\",\n    textAlign: \"center\",\n    paddingVertical: 5,\n    marginBottom: 10\n  },\n  space: {\n    height: 10\n  },\n  heading: {\n    fontSize: 30,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n    padding: 20\n  }\n});","map":{"version":3,"names":["StatusBar","StyleSheet","View","FlatList","Button","CheckBox","Input","Text","ButtonGroup","Font","useEffect","useState","useCallback","NavigationContainer","createNativeStackNavigator","StackActions","AsyncStorage","React","SafeAreaView","Unorderedlist","jsx","_jsx","jsxs","_jsxs","Stack","cacheFonts","_x","_cacheFonts","apply","arguments","_asyncToGenerator","fonts","map","_ref4","font","loadAsync","_x2","QUESTIONS_SCREEN","SUMMARY_SCREEN","App","_useState","_useState2","_slicedToArray","currentQuestionIndex","setCurrentQuestionIndex","questions","children","Navigator","initialRouteName","Screen","name","component","QuestionsScreen","initialParams","SummaryScreen","_ref","route","_route$params","params","currentQuestion","_useState3","_useState4","selectChoice","setSelectChoice","_useState5","_useState6","selectedChoices","setSelectedChoices","handleSelectChoice","value","handleSelectedChoices","handleNextQuestion","prevSelectChoice","concat","_toConsumableArray","length","navigation","push","renderQuestion","_ref2","item","index","style","styles","heading","prompt","buttons","choices","onPress","setSelected","containerStyle","marginBottom","title","testID","button","data","renderItem","indexExtractor","toString","_ref3","exerciseList","_useState7","_useState8","count","setCount","currentExercise","console","log","relatedExercise","find","ex","related","navRelatedExercise","type","DURATION_EXERCISE","REPITITION_EXERCISE","exerciseKey","key","fontSize","textAlign","padding","exerciseButton","goBack","create","container","flex","backgroundColor","alignItems","justifyContent","horizontal","flexDirection","buttonGroup","color","paddingVertical","space","height"],"sources":["C:/Users/5duck/github-classroom/UCF-GaiM/dig4639-s23-main-Lianalp1212/unit2/lab10/App.js"],"sourcesContent":["// used lab9 as a base\r\n// question one reference - https://colorcodedlyrics.com/2022/12/30/ateez-halazia/\r\n// question two refercne - https://colorcodedlyrics.com/2021/12/09/xdinary-heroes-egseudineoli-hieolojeu-happy-death-day/\r\n// question three reference  - https://colorcodedlyrics.com/2021/12/23/stray-kids-broken-compass-gojangnan-nachimban/\r\n\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport { StyleSheet, View, FlatList } from 'react-native';\r\nimport { Button, CheckBox, Input, Text, ButtonGroup } from '@rneui/themed';\r\nimport * as Font from 'expo-font';\r\nimport { useEffect, useState, useCallback } from 'react';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport { StackActions } from '@react-navigation/native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport * as React from 'react';\r\nimport { SafeAreaView } from 'react-native-safe-area-context';\r\nimport Unorderedlist from 'react-native-unordered-list';\r\n\r\nconst Stack = createNativeStackNavigator()\r\n\r\nasync function cacheFonts(fonts) {\r\n  return fonts.map(async (font) => await Font.loadAsync(font))\r\n}\r\n\r\nconst QUESTIONS_SCREEN = \"Questions\"\r\nconst SUMMARY_SCREEN = \"Summary\"\r\n\r\nexport default function App() {\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)\r\n  let questions = [\r\n    {\r\n      \"prompt\": \"Q1: Select the best answer: Who are you?\",\r\n      \"type\": \"multiple-choice\",\r\n      \"index\": 0,\r\n      \"key\": \"0\",\r\n      \"choices\": [\r\n        \"It's just me, myself and I\",\r\n        \"거울 속 비친 넌 누구인가\",\r\n        \"기대 안에 기대 이 길의 뒤에\",\r\n        \"All of the above\",\r\n    ],\r\n      \"correct\": 3\r\n    },\r\n    {\r\n      \"prompt\": \"Q2: Fill in the blank: Happy ______ day\",\r\n      \"type\": \"multiple-answer\",\r\n      \"index\": 1,\r\n      \"key\": \"1\",\r\n      \"choices\": [\r\n        \"Birthday\",\r\n        \"Death\",\r\n        \"Best\",\r\n        \"Worst\",\r\n    ],\r\n      \"correct\": [1,3]\r\n    },\r\n    {\r\n      \"prompt\": `Q3: Is the following statment true or false?\\n\r\n        Sail across the world, this is our time\\n\r\n        Stray Kids, STAY or none, we're gonna cross the finish line\\n\r\n        No stopping time when all we see are goals in our sights\\n\r\n        No turning back, push forward, rise above the light`,\r\n      \"type\": \"true-false\",\r\n      \"index\": 2,\r\n      \"key\": \"2\",\r\n        \"choices\": [\r\n        \"True\",\r\n        \"False\",\r\n    ],\r\n      \"correct\": 0\r\n    },\r\n  ]\r\n    return (\r\n      <NavigationContainer>{\r\n        <Stack.Navigator initialRouteName={QUESTIONS_SCREEN}>\r\n          <Stack.Screen name=\"Questions\" component={QuestionsScreen} initialParams={{questions: questions, currentQuestionIndex: currentQuestionIndex}}></Stack.Screen>\r\n          <Stack.Screen name=\"Summary\" component={SummaryScreen} initialParams={{questions: questions, currentQuestionIndex: currentQuestionIndex}}></Stack.Screen>\r\n        </Stack.Navigator>\r\n    }</NavigationContainer>\r\n  );\r\n}\r\n\r\nfunction QuestionsScreen({route}) {\r\n  const { questions, currentQuestionIndex,  } = route.params\r\n  let currentQuestion = questions[currentQuestionIndex]\r\n  const [selectChoice, setSelectChoice] = useState(0)\r\n  const [selectedChoices, setSelectedChoices] = useState([0, 1, 2, 3])\r\n  \r\n  const handleSelectChoice = (value) => {\r\n    setSelectChoice(value)\r\n  }\r\n  const handleSelectedChoices = (value) => {\r\n    setSelectedChoices(value)\r\n  }\r\n\r\n  const handleNextQuestion = () => {\r\n    setSelectChoice((prevSelectChoice) => [\r\n      ...prevSelectChoice,\r\n      selectChoice\r\n    ])\r\n    setSelectChoice(null)\r\n    if (currentQuestionIndex + 1 < questions.length) {\r\n      navigation.push(QUESTIONS_SCREEN, {questions, currentQuestionIndex: currentQuestionIndex + 1})\r\n    } else {\r\n      navigation.push(SUMMARY_SCREEN, { questions, selectedChoices })\r\n    }\r\n  }\r\n  \r\n  let renderQuestion = ({item, index}) => {\r\n    if (index !== currentQuestionIndex) {\r\n      return null\r\n    }\r\n    <View key={index}>\r\n     <Text style={styles.heading}>{item.prompt}</Text>\r\n      <ButtonGroup buttons={item.choices}\r\n        selectChoice={selectChoice}\r\n        onPress={(value) => {\r\n          setSelected\r\n        }}\r\n        containerStyle={{ marginBottom: 20 }}>\r\n      </ButtonGroup>\r\n     <Button title=\"Next Question\" testID=\"next-question\" style={styles.button}\r\n      onPress={handleNextQuestion}></Button>\r\n    </View>\r\n  }\r\n     return (\r\n    <SafeAreaView>\r\n      <View>\r\n        <Text style={styles.heading}>{currentQuestion.prompt}</Text>\r\n          <FlatList data={questions}\r\n            renderItem={renderQuestion}\r\n            indexExtractor={(index) => index.toString()}>\r\n          </FlatList>\r\n          \r\n      </View>\r\n    </SafeAreaView>\r\n  ) \r\n}\r\n\r\nfunction SummaryScreen({navigation, route, exerciseList}) {\r\n    let [count, setCount] = useState(0)\r\n    let currentExercise = route.params\r\n    console.log(route.params.exerciseList)\r\n    let relatedExercise = exerciseList.find(ex => ex.name === currentExercise.related)\r\n    let navRelatedExercise = useCallback(() => {\r\n      navigation.push(relatedExercise.type === DURATION_EXERCISE ? DURATION_EXERCISE : REPITITION_EXERCISE, {exerciseKey: route.params.key, name: route.params.name})\r\n    }, [relatedExercise])\r\n    return <View>\r\n      <Text style={styles.heading}>{route.params.name}</Text>\r\n      <Text style={{fontSize: \"3em\", textAlign: 'center', padding: 10}}>{count}</Text>\r\n      <Button title=\"Add\" style={styles.exerciseButton} onPress={()=>setCount(count=>count+1)}></Button>\r\n      <Button title=\"Reset\" style={styles.exerciseButton} onPress={()=>setCount(0)}></Button>\r\n      <Button title=\"Home\" style={styles.exerciseButton} onPress={() => navigation.goBack()}></Button>\r\n      <Text>Related Exercise:</Text>\r\n      <Button title={relatedExercise.name} style={styles.button}\r\n      onPress={navRelatedExercise} />\r\n    </View>\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1, \r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  horizontal: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-around',\r\n    padding: 10,\r\n  },\r\n  button: {\r\n    alignItems: 'center',\r\n    padding: 10,\r\n  },\r\n  buttonGroup: {\r\n    backgroundColor : \"#2089dc\",\r\n    color : \"white\",\r\n    textAlign : \"center\",\r\n    paddingVertical : 5,\r\n    marginBottom : 10\r\n  },\r\n  space: {\r\n    height: 10\r\n  },\r\n  heading: {\r\n    fontSize: 30,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    padding: 20\r\n  }\r\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}