{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { Button, Input, Text, ButtonGroup } from '@rneui/themed';\nimport { useEffect, useState } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as React from 'react';\nimport * as Font from 'expo-font';\nimport FontAwesome from '@expo/vector-icons/FontAwesome';\nimport { CheckBox } from 'react-native-elements';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction cacheFonts(_x) {\n  return _cacheFonts.apply(this, arguments);\n}\nfunction _cacheFonts() {\n  _cacheFonts = _asyncToGenerator(function* (fonts) {\n    return fonts.map(function () {\n      var _ref4 = _asyncToGenerator(function* (font) {\n        return yield Font.loadAsync(font);\n      });\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  });\n  return _cacheFonts.apply(this, arguments);\n}\nvar Stack = createNativeStackNavigator();\nvar questions = [{\n  \"prompt\": \"Q1: Select the best answer: Who are you?\",\n  \"type\": \"multiple-choice\",\n  \"choices\": [\"It's just me, myself and I\", \"거울 속 비친 넌 누구인가\", \"기대 안에 기대 이 길의 뒤에\", \"All of the above\"],\n  \"correct\": 3\n}, {\n  \"prompt\": \"Q2: Fill in the blank: Happy ______ day\",\n  \"type\": \"multiple-answer\",\n  \"choices\": [\"Birthday\", \"Death\", \"Best\", \"Worst\"],\n  \"correct\": [1, 3]\n}, {\n  \"prompt\": \"Q3: Is the following statment true or false?\\n\\n      Stray Kids, STAY or none, we're gonna cross the finish line\",\n  \"type\": \"true-false\",\n  \"choices\": [\"True\", \"False\"],\n  \"correct\": 0\n}];\nfunction Question(_ref) {\n  var navigation = _ref.navigation,\n    route = _ref.route;\n  console.log(route.params);\n  var _route$params = route.params,\n    questionNumber = _route$params.questionNumber,\n    userChoices = _route$params.userChoices,\n    data = _route$params.data;\n  var _data$questionNumber = data[questionNumber],\n    choices = _data$questionNumber.choices,\n    prompt = _data$questionNumber.prompt,\n    type = _data$questionNumber.type;\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedIndex = _useState2[0],\n    setSelectedIndex = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedIndexes = _useState4[0],\n    setSelectedIndexes = _useState4[1];\n  var nextQuestion = function nextQuestion() {\n    var nextQuestion = questionNumber + 1;\n    if (type !== 'multiple-answer') {\n      userChoices.push(selectedIndex);\n    } else {\n      userChoices.push(selectedIndexes);\n    }\n    if (nextQuestion < questions.length) {\n      console.log(\"next question\");\n      navigation.navigate('Question', {\n        questionNumber: nextQuestion,\n        questions: questions,\n        userChoices: userChoices\n      });\n    } else {\n      navigation.navigate('SummaryScreen', {\n        questionNumber: nextQuestion,\n        questions: questions,\n        userChoices: userChoices\n      });\n    }\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.heading,\n      children: prompt\n    }), type !== 'multiple-answer' ? _jsx(ButtonGroup, {\n      testID: \"choices\",\n      buttons: choices,\n      vertical: true,\n      selectedIndex: selectedIndex,\n      onPress: function onPress(value) {\n        setSelectedIndex(value);\n      },\n      containerStyle: {\n        marginBottom: 20,\n        width: '70'\n      }\n    }) : _jsx(ButtonGroup, {\n      testID: \"choices\",\n      buttons: choices,\n      vertical: true,\n      selectMultiple: true,\n      selectedIndexes: selectedIndexes,\n      onPress: function onPress(value) {\n        setSelectedIndexes(value);\n      },\n      containerStyle: {\n        marginBottom: 20,\n        width: '70'\n      }\n    }), _jsx(Button, {\n      testId: \"next-question\",\n      onPress: nextQuestion,\n      title: \"Submit\"\n    })]\n  });\n}\nfunction SummaryScreen(_ref2) {\n  var route = _ref2.route;\n  var calculateCorrect = function calculateCorrect(userSelected, correct, type) {\n    var userCorrect = false;\n    if (type == 'multiple-answer') {\n      userCorrect = correct.every(function (item) {\n        return userSelected.includes(item);\n      }) && userSelected.every(function (item) {\n        return correct.includes(item);\n      });\n    } else {\n      userCorrect = userSelected === correct;\n    }\n    return userCorrect;\n  };\n  var totalScore = 0;\n  for (var i = 0; i < route.params.data.length; i++) {\n    if (calculateCorrect(route.params.userChoices[i], route.params.data[i].correct, route.params.data[i].type)) {\n      totalScore++;\n    }\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      children: [_jsx(Text, {\n        style: styles.heading,\n        children: \"Summary\"\n      }), _jsxs(Text, {\n        style: styles.subheading,\n        children: [\"Score: \", totalScore]\n      })]\n    }), _jsx(FlatList, {\n      data: route.params.data,\n      renderItem: function renderItem(_ref3) {\n        var item = _ref3.item,\n          index = _ref3.index;\n        var choices = item.choices,\n          prompt = item.prompt,\n          type = item.type,\n          correct = item.correct;\n        var userSelected = route.params.userChoices[index];\n        var userCorrect = calculateCorrect(userSelected, correct, type);\n        return _jsxs(View, {\n          children: [_jsx(Text, {\n            style: styles.subheading,\n            children: prompt\n          }), choices.map(function (value, choiceIndex) {\n            var incorrect = false;\n            var userDidSelect = false;\n            if (type == 'multiple-answer') {\n              userDidSelect = userSelected.includes(choiceIndex);\n              incorrect = userDidSelect && !correct.includes(choiceIndex);\n            } else {\n              userDidSelect = userSelected == choiceIndex;\n              incorrect = userDidSelect && userSelected !== correct;\n            }\n            return _jsx(CheckBox, {\n              containerStyle: {\n                backgroundColor: userDidSelect ? incorrect == false ? 'lightgreen' : 'gray' : undefined\n              },\n              checked: type == 'multiple-answer' ? correct.includes(choiceIndex) : correct == choiceIndex,\n              textStyle: {\n                textDecorationLine: incorrect ? 'line-through' : undefined\n              },\n              title: value\n            }, value);\n          })]\n        }, index);\n      }\n    })]\n  });\n}\nexport default function App() {\n  cacheFonts([FontAwesome.font]);\n  return _jsx(NavigationContainer, {\n    children: _jsxs(Stack.Navigator, {\n      initialRouteName: \"Question\",\n      children: [_jsx(Stack.Screen, {\n        name: \"Question\",\n        initialParams: {\n          questionNumber: 0,\n          data: questions,\n          userChoices: []\n        },\n        options: {\n          headerShown: false\n        },\n        children: function children(props) {\n          return _jsx(Question, _objectSpread({}, props));\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"SummaryScreen\",\n        initialParams: {\n          questionNumber: questions.length - 1,\n          data: questions,\n          userChoices: [3, [1, 3], 0]\n        },\n        options: {\n          headerShown: false\n        },\n        component: SummaryScreen\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  horizontal: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    padding: 10\n  },\n  button: {\n    alignItems: 'center',\n    padding: 10\n  },\n  buttonGroup: {\n    backgroundColor: \"#2089dc\",\n    color: \"white\",\n    textAlign: \"center\",\n    paddingVertical: 5,\n    marginBottom: 10\n  },\n  space: {\n    height: 10\n  },\n  heading: {\n    fontSize: 30,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n    paddingTop: 20,\n    paddingBottom: 10\n  },\n  subheading: {\n    fontSize: 25,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n    paddingBottom: 20\n  },\n  summary: {\n    fontSize: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n    padding: 15\n  },\n  summaryAnd: {\n    fontSize: 17,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n    padding: 10\n  }\n});","map":{"version":3,"names":["StatusBar","StyleSheet","View","FlatList","Button","Input","Text","ButtonGroup","useEffect","useState","NavigationContainer","createNativeStackNavigator","React","Font","FontAwesome","CheckBox","jsx","_jsx","jsxs","_jsxs","cacheFonts","_x","_cacheFonts","apply","arguments","_asyncToGenerator","fonts","map","_ref4","font","loadAsync","_x2","Stack","questions","Question","_ref","navigation","route","console","log","params","_route$params","questionNumber","userChoices","data","_data$questionNumber","choices","prompt","type","_useState","_useState2","_slicedToArray","selectedIndex","setSelectedIndex","_useState3","_useState4","selectedIndexes","setSelectedIndexes","nextQuestion","push","length","navigate","style","styles","container","children","heading","testID","buttons","vertical","onPress","value","containerStyle","marginBottom","width","selectMultiple","testId","title","SummaryScreen","_ref2","calculateCorrect","userSelected","correct","userCorrect","every","item","includes","totalScore","i","subheading","renderItem","_ref3","index","choiceIndex","incorrect","userDidSelect","backgroundColor","undefined","checked","textStyle","textDecorationLine","App","Navigator","initialRouteName","Screen","name","initialParams","options","headerShown","props","_objectSpread","component","create","flex","alignItems","justifyContent","horizontal","flexDirection","padding","button","buttonGroup","color","textAlign","paddingVertical","space","height","fontSize","paddingTop","paddingBottom","summary","summaryAnd"],"sources":["C:/Users/5duck/github-classroom/studying-app/App.js"],"sourcesContent":["// used lab9 as a base\r\n// question one reference - https://colorcodedlyrics.com/2022/12/30/ateez-halazia/\r\n// question two refercne - https://colorcodedlyrics.com/2021/12/09/xdinary-heroes-egseudineoli-hieolojeu-happy-death-day/\r\n// question three reference  - https://colorcodedlyrics.com/2021/12/23/stray-kids-broken-compass-gojangnan-nachimban/\r\n\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport { StyleSheet, View, FlatList } from 'react-native';\r\nimport { Button, Input, Text, ButtonGroup } from '@rneui/themed';\r\nimport { useEffect, useState } from 'react';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport * as React from 'react';\r\nimport * as Font from 'expo-font';\r\nimport FontAwesome from '@expo/vector-icons/FontAwesome';\r\nimport { CheckBox } from 'react-native-elements';\r\n\r\nasync function cacheFonts(fonts) {\r\n  return fonts.map(async (font) => await Font.loadAsync(font))\r\n}\r\nconst Stack = createNativeStackNavigator()\r\n\r\nconst questions = [\r\n  {\r\n    \"prompt\": \"Q1: Select the best answer: Who are you?\",\r\n    \"type\": \"multiple-choice\",\r\n    \"choices\": [\r\n      \"It's just me, myself and I\",\r\n      \"거울 속 비친 넌 누구인가\",\r\n      \"기대 안에 기대 이 길의 뒤에\",\r\n      \"All of the above\",\r\n  ],\r\n    \"correct\": 3\r\n  },\r\n  {\r\n    \"prompt\": \"Q2: Fill in the blank: Happy ______ day\",\r\n    \"type\": \"multiple-answer\",\r\n    \"choices\": [\r\n      \"Birthday\",\r\n      \"Death\",\r\n      \"Best\",\r\n      \"Worst\",\r\n  ],\r\n    \"correct\": [1, 3]\r\n  },\r\n  {\r\n    \"prompt\": `Q3: Is the following statment true or false?\\n\r\n      Stray Kids, STAY or none, we're gonna cross the finish line`,\r\n    \"type\": \"true-false\",\r\n    \"choices\": [\r\n      \"True\",\r\n      \"False\",\r\n  ],\r\n    \"correct\": 0\r\n  },\r\n]\r\n\r\nfunction Question({navigation, route}) {\r\n  console.log(route.params)\r\n  const { questionNumber, userChoices, data } = route.params\r\n  let { choices, prompt, type } = data[questionNumber]\r\n  let [selectedIndex, setSelectedIndex] = useState(0)\r\n  let [selectedIndexes, setSelectedIndexes] = useState([])\r\n  let nextQuestion = () => {\r\n    let nextQuestion = questionNumber + 1\r\n    if ( type !== 'multiple-answer') {\r\n      userChoices.push(selectedIndex)\r\n    } else {\r\n      userChoices.push(selectedIndexes)\r\n    }\r\n    if (nextQuestion < questions.length) {\r\n      console.log(\"next question\")\r\n      navigation.navigate('Question', {\r\n        questionNumber: nextQuestion,\r\n        questions,\r\n        userChoices,\r\n      })\r\n    } else {\r\n      navigation.navigate('SummaryScreen', {\r\n        questionNumber: nextQuestion,\r\n        questions,\r\n        userChoices,\r\n      })\r\n    }\r\n  }\r\n  return (\r\n  <View style={styles.container}>\r\n    <Text style={styles.heading}>{prompt}</Text>\r\n    {type !== 'multiple-answer' ? (\r\n      <ButtonGroup\r\n        testID=\"choices\"\r\n        buttons={choices}\r\n        vertical\r\n        selectedIndex={selectedIndex}\r\n        onPress={(value) => {\r\n          setSelectedIndex(value)\r\n        }}\r\n        containerStyle={{marginBottom: 20, width: '70'}}\r\n        />\r\n    ) : (\r\n      <ButtonGroup\r\n        testID=\"choices\"\r\n        buttons={choices}\r\n        vertical\r\n        selectMultiple\r\n        selectedIndexes={selectedIndexes}\r\n        onPress={(value) => {\r\n          setSelectedIndexes(value)\r\n        }}\r\n        containerStyle={{marginBottom: 20, width: '70'}}\r\n        \r\n      />\r\n    )}\r\n    <Button \r\n      testId=\"next-question\"\r\n      onPress={nextQuestion}\r\n      title=\"Submit\"\r\n    ></Button>\r\n  </View>\r\n  )\r\n}\r\n\r\n  function SummaryScreen({route}) {\r\n    let calculateCorrect = (userSelected, correct, type) => {\r\n      let userCorrect = false \r\n      if (type == 'multiple-answer') {\r\n        userCorrect = correct.every(item => userSelected.includes(item))\r\n        && userSelected.every(item => correct.includes(item))\r\n      } else {\r\n        userCorrect = userSelected === correct \r\n      }\r\n      return userCorrect\r\n    }\r\n    let totalScore = 0\r\n    for (let i = 0; i < route.params.data.length; i++) {\r\n      if (\r\n        calculateCorrect(\r\n          route.params.userChoices[i],\r\n          route.params.data[i].correct,\r\n          route.params.data[i].type\r\n        )) {\r\n        totalScore++\r\n      }\r\n    }\r\n  return (\r\n    <View style={styles.container}>\r\n      <View>\r\n        <Text style={styles.heading}>Summary</Text>\r\n        <Text style={styles.subheading}>Score: {totalScore}</Text>\r\n      </View>\r\n      <FlatList\r\n      data={route.params.data}\r\n      renderItem={({item, index}) => {\r\n        let { choices, prompt, type, correct } = item\r\n        let userSelected = route.params.userChoices[index]\r\n        let userCorrect = calculateCorrect(userSelected, correct, type)\r\n        return (\r\n          <View key={index}>\r\n            <Text style={styles.subheading}>{prompt}</Text>\r\n            {choices.map((value, choiceIndex) => {\r\n              let incorrect = false\r\n              let userDidSelect = false \r\n              if (type == 'multiple-answer') {\r\n                userDidSelect = userSelected.includes(choiceIndex)\r\n                incorrect = userDidSelect && !correct.includes(choiceIndex)\r\n              } else {\r\n                userDidSelect = userSelected == choiceIndex\r\n                incorrect = userDidSelect && userSelected !== correct\r\n              }\r\n              return (\r\n                <CheckBox\r\n                containerStyle={{\r\n                  backgroundColor: userDidSelect ? incorrect == false\r\n                    ? 'lightgreen'\r\n                    : 'gray'\r\n                  : undefined,\r\n                }}\r\n                checked = {\r\n                  type == 'multiple-answer'\r\n                    ? correct.includes(choiceIndex)\r\n                    : correct == choiceIndex\r\n                }\r\n                textStyle={{\r\n                  textDecorationLine: incorrect\r\n                    ? 'line-through'\r\n                    : undefined,\r\n                }}\r\n                key={value}\r\n                title={value}\r\n                ></CheckBox>\r\n              )\r\n            })}\r\n          </View>\r\n          )\r\n        }}\r\n      ></FlatList>\r\n    </View>\r\n    )  \r\n  }\r\n\r\nexport default function App() {\r\n  cacheFonts([FontAwesome.font])\r\n  return (\r\n    <NavigationContainer>\r\n      <Stack.Navigator initialRouteName=\"Question\">\r\n        <Stack.Screen\r\n          name=\"Question\"\r\n          initialParams={{\r\n            questionNumber: 0,\r\n            data: questions,\r\n            userChoices: []\r\n          }}\r\n          options={{headerShown: false}}>\r\n          {(props) => <Question {...props} />}\r\n        </Stack.Screen>\r\n        <Stack.Screen\r\n          name=\"SummaryScreen\"\r\n          initialParams={{\r\n            questionNumber: questions.length - 1,\r\n            data: questions,\r\n            userChoices: [3, [1, 3], 0],\r\n          }}\r\n          options={{headerShown: false}}\r\n          component={SummaryScreen}\r\n        ></Stack.Screen>\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1, \r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  horizontal: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-around',\r\n    padding: 10,\r\n  },\r\n  button: {\r\n    alignItems: 'center',\r\n    padding: 10,\r\n  },\r\n  buttonGroup: {\r\n    backgroundColor : \"#2089dc\",\r\n    color : \"white\",\r\n    textAlign : \"center\",\r\n    paddingVertical : 5,\r\n    marginBottom : 10,\r\n  },\r\n  space: {\r\n    height: 10\r\n  },\r\n  heading: {\r\n    fontSize: 30,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    paddingTop: 20,\r\n    paddingBottom: 10\r\n  },\r\n  subheading: {\r\n    fontSize: 25,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    paddingBottom: 20\r\n  },\r\n  summary: {\r\n    fontSize: 20,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    padding: 15\r\n  },\r\n  summaryAnd: {\r\n    fontSize: 17,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    padding: 10\r\n  }\r\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}