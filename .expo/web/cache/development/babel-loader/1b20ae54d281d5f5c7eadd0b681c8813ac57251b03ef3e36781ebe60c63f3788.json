{"ast":null,"code":"import _readOnlyError from \"@babel/runtime/helpers/readOnlyError\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { Button, CheckBox, Input, Text, ButtonGroup } from '@rneui/themed';\nimport * as Font from 'expo-font';\nimport { useEffect, useState, useCallback } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { StackActions } from '@react-navigation/native';\nimport * as React from 'react';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nfunction cacheFonts(_x) {\n  return _cacheFonts.apply(this, arguments);\n}\nfunction _cacheFonts() {\n  _cacheFonts = _asyncToGenerator(function* (fonts) {\n    return fonts.map(function () {\n      var _ref7 = _asyncToGenerator(function* (font) {\n        return yield Font.loadAsync(font);\n      });\n      return function (_x2) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n  });\n  return _cacheFonts.apply(this, arguments);\n}\nvar QUESTION1_SCREEN = \"Question1\";\nvar QUESTION2_SCREEN = \"Question2\";\nvar QUESTION3_SCREEN = \"Question3\";\nvar SUMMARY_SCREEN = \"Summary\";\nexport default function App() {\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentQuestionIndex = _useState2[0],\n    setCurrentQuestionIndex = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    answeredCount = _useState4[0],\n    setAnsweredCount = _useState4[1];\n  var questions = [{\n    \"prompt\": \"Q1: Select the best answer: Who are you?\",\n    \"type\": \"multiple-choice\",\n    \"index\": 0,\n    \"key\": \"0\",\n    \"choices\": [\"It's just me, myself and I\", \"거울 속 비친 넌 누구인가\", \"기대 안에 기대 이 길의 뒤에\", \"All of the above\"],\n    \"correct\": 3\n  }, {\n    \"prompt\": \"Q2: Fill in the blank: Happy ______ day\",\n    \"type\": \"multiple-answer\",\n    \"index\": 1,\n    \"key\": \"1\",\n    \"choices\": [\"Birthday\", \"Death\", \"Best\", \"Worst\"],\n    \"correct\": [1, 3]\n  }, {\n    \"prompt\": \"Q3: Is the following statment true or false?\\n\\n        Stray Kids, STAY or none, we're gonna cross the finish line\",\n    \"type\": \"true-false\",\n    \"index\": 2,\n    \"key\": \"2\",\n    \"choices\": [\"True\", \"False\"],\n    \"correct\": 0\n  }];\n  return _jsx(NavigationContainer, {\n    children: _jsxs(Stack.Navigator, {\n      initialRouteName: QUESTION1_SCREEN,\n      children: [_jsx(Stack.Screen, {\n        name: \"Question1\",\n        component: Question1Screen,\n        initialParams: {\n          questions: questions,\n          currentQuestionIndex: currentQuestionIndex,\n          answeredCount: answeredCount\n        },\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Question2\",\n        component: Question2Screen,\n        initialParams: {\n          questions: questions,\n          currentQuestionIndex: currentQuestionIndex,\n          answeredCount: answeredCount\n        },\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Question3\",\n        component: Question3Screen,\n        initialParams: {\n          questions: questions,\n          currentQuestionIndex: currentQuestionIndex,\n          answeredCount: answeredCount\n        },\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Summary\",\n        component: SummaryScreen,\n        initialParams: {\n          questions: questions,\n          currentQuestionIndex: currentQuestionIndex,\n          answeredCount: answeredCount\n        },\n        options: {\n          headerShown: false\n        }\n      })]\n    })\n  });\n}\nfunction check(_ref) {\n  var route = _ref.route;\n  var answeredCount = route.params.answeredCount;\n  var prevAnsweredCount = React.useRef();\n  var checkAnswer = useEffect(function () {\n    if (selectedIndex === currentQuestion.correct) {\n      prevAnsweredCount + 1, _readOnlyError(\"answeredCount\");\n    } else {\n      prevAnsweredCount, _readOnlyError(\"answeredCount\");\n    }\n  });\n}\nfunction check2(_ref2) {\n  var route = _ref2.route;\n  var answeredCount = route.params.answeredCount;\n  var prevAnsweredCount = React.useRef();\n  var checkAnswer = useEffect(function () {\n    if (selectedIndexes === currentQuestion.correct) {\n      prevAnsweredCount + 1, _readOnlyError(\"answeredCount\");\n    } else {\n      prevAnsweredCount, _readOnlyError(\"answeredCount\");\n    }\n  });\n}\nfunction Question1Screen(_ref3) {\n  var route = _ref3.route,\n    navigation = _ref3.navigation;\n  var _route$params = route.params,\n    questions = _route$params.questions,\n    currentQuestionIndex = _route$params.currentQuestionIndex,\n    answeredCount = _route$params.answeredCount;\n  var currentQuestion = questions[currentQuestionIndex];\n  var _useState5 = useState(),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedIndex = _useState6[0],\n    setSelectedIndex = _useState6[1];\n  var handleNextQuestion = function handleNextQuestion() {\n    if (currentQuestionIndex + 1 < questions.length) {\n      navigation.push(QUESTION2_SCREEN, {\n        questions: questions,\n        currentQuestionIndex: currentQuestionIndex + 1,\n        selectedIndex: selectedIndex,\n        answeredCount: answeredCount,\n        route: route\n      });\n      setSelectedIndex([]);\n    } else {\n      check2();\n    }\n  };\n  return _jsx(SafeAreaView, {\n    children: _jsxs(View, {\n      children: [_jsx(Text, {\n        style: styles.heading,\n        children: \"Quiz\"\n      }), _jsx(Text, {\n        style: styles.subheading,\n        children: currentQuestion.prompt\n      }), _jsx(ButtonGroup, {\n        buttons: currentQuestion.choices,\n        selectedIndex: selectedIndex,\n        onPress: function onPress(value) {\n          setSelectedIndex(value);\n        },\n        containerStyle: {\n          marginBottom: 20\n        },\n        vertical: true\n      }), _jsx(Button, {\n        title: \"Next Question\",\n        testID: \"next-question\",\n        style: styles.button,\n        onPress: handleNextQuestion\n      })]\n    })\n  });\n}\nfunction Question2Screen(_ref4) {\n  var route = _ref4.route,\n    navigation = _ref4.navigation;\n  var _route$params2 = route.params,\n    questions = _route$params2.questions,\n    currentQuestionIndex = _route$params2.currentQuestionIndex,\n    answeredCount = _route$params2.answeredCount;\n  var currentQuestion = questions[currentQuestionIndex];\n  var _useState7 = useState([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    selectedIndexes = _useState8[0],\n    setSelectedIndexes = _useState8[1];\n  var handleNextQuestion = function handleNextQuestion() {\n    if (currentQuestionIndex + 1 < questions.length) {\n      navigation.push(QUESTION3_SCREEN, {\n        questions: questions,\n        currentQuestionIndex: currentQuestionIndex + 1,\n        selectedIndexes: selectedIndexes,\n        answeredCount: answeredCount,\n        route: route\n      });\n      setSelectedIndexes([]);\n    } else {\n      check();\n    }\n  };\n  return _jsx(SafeAreaView, {\n    children: _jsxs(View, {\n      children: [_jsx(Text, {\n        style: styles.heading,\n        children: \"Quiz\"\n      }), _jsx(Text, {\n        style: styles.subheading,\n        children: currentQuestion.prompt\n      }), _jsx(ButtonGroup, {\n        buttons: currentQuestion.choices,\n        selectMultiple: true,\n        selectedIndexes: selectedIndexes,\n        onPress: function onPress(value) {\n          setSelectedIndexes(value);\n        },\n        containerStyle: {\n          marginBottom: 20\n        }\n      }), _jsx(Button, {\n        title: \"Next Question\",\n        testID: \"next-question\",\n        style: styles.button,\n        onPress: handleNextQuestion\n      })]\n    })\n  });\n}\nfunction Question3Screen(_ref5) {\n  var route = _ref5.route,\n    navigation = _ref5.navigation;\n  var _route$params3 = route.params,\n    questions = _route$params3.questions,\n    currentQuestionIndex = _route$params3.currentQuestionIndex,\n    answeredCount = _route$params3.answeredCount;\n  var currentQuestion = questions[currentQuestionIndex];\n  var _useState9 = useState(),\n    _useState10 = _slicedToArray(_useState9, 2),\n    selectedIndex = _useState10[0],\n    setSelectedIndex = _useState10[1];\n  var handleNextQuestion = function handleNextQuestion() {\n    if (currentQuestionIndex + 1 < questions.length) {\n      navigation.push(SUMMARY_SCREEN, {\n        questions: questions,\n        currentQuestionIndex: currentQuestionIndex + 1,\n        selectedIndex: selectedIndex,\n        answeredCount: answeredCount,\n        route: route\n      });\n      setSelectedIndex([]);\n    } else {\n      check();\n    }\n  };\n  console.log(route);\n  return _jsx(SafeAreaView, {\n    children: _jsxs(View, {\n      children: [_jsx(Text, {\n        style: styles.heading,\n        children: \"Quiz\"\n      }), _jsx(Text, {\n        style: styles.subheading,\n        children: currentQuestion.prompt\n      }), _jsx(ButtonGroup, {\n        buttons: currentQuestion.choices,\n        selectedIndex: selectedIndex,\n        onPress: function onPress(value) {\n          setSelectedIndex(value);\n        },\n        containerStyle: {\n          marginBottom: 20\n        }\n      }), _jsx(Button, {\n        title: \"Finish\",\n        style: styles.button,\n        onPress: handleNextQuestion\n      })]\n    })\n  });\n}\nfunction SummaryScreen(_ref6) {\n  var route = _ref6.route,\n    navigation = _ref6.navigation;\n  var _route$params4 = route.params,\n    questions = _route$params4.questions,\n    answeredCount = _route$params4.answeredCount;\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      style: styles.heading,\n      children: \"Summary\"\n    }), _jsxs(Text, {\n      testID: \"total\",\n      style: styles.subheading,\n      children: [\"Quiz Score:\", answeredCount, \"/3\"]\n    }), _jsx(Button, {\n      title: \"Restart\",\n      style: styles.button,\n      onPress: function onPress() {\n        return navigation.push(QUESTION1_SCREEN, {\n          questions: questions\n        });\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  horizontal: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    padding: 10\n  },\n  button: {\n    alignItems: 'center',\n    padding: 10\n  },\n  buttonGroup: {\n    backgroundColor: \"#2089dc\",\n    color: \"white\",\n    textAlign: \"center\",\n    paddingVertical: 5,\n    marginBottom: 10\n  },\n  space: {\n    height: 10\n  },\n  heading: {\n    fontSize: 30,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n    padding: 20\n  },\n  subheading: {\n    fontSize: 25,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n    padding: 20\n  }\n});","map":{"version":3,"names":["Button","CheckBox","Input","Text","ButtonGroup","Font","useEffect","useState","useCallback","NavigationContainer","createNativeStackNavigator","StackActions","React","SafeAreaView","jsx","_jsx","jsxs","_jsxs","Stack","cacheFonts","_x","_cacheFonts","apply","arguments","_asyncToGenerator","fonts","map","_ref7","font","loadAsync","_x2","QUESTION1_SCREEN","QUESTION2_SCREEN","QUESTION3_SCREEN","SUMMARY_SCREEN","App","_useState","_useState2","_slicedToArray","currentQuestionIndex","setCurrentQuestionIndex","_useState3","_useState4","answeredCount","setAnsweredCount","questions","children","Navigator","initialRouteName","Screen","name","component","Question1Screen","initialParams","options","headerShown","Question2Screen","Question3Screen","SummaryScreen","check","_ref","route","params","prevAnsweredCount","useRef","checkAnswer","selectedIndex","currentQuestion","correct","_readOnlyError","check2","_ref2","selectedIndexes","_ref3","navigation","_route$params","_useState5","_useState6","setSelectedIndex","handleNextQuestion","length","push","View","style","styles","heading","subheading","prompt","buttons","choices","onPress","value","containerStyle","marginBottom","vertical","title","testID","button","_ref4","_route$params2","_useState7","_useState8","setSelectedIndexes","selectMultiple","_ref5","_route$params3","_useState9","_useState10","console","log","_ref6","_route$params4","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","horizontal","flexDirection","padding","buttonGroup","color","textAlign","paddingVertical","space","height","fontSize"],"sources":["C:/Users/5duck/github-classroom/UCF-GaiM/dig4639-s23-main-Lianalp1212/unit2/lab10/App.js"],"sourcesContent":["// used lab9 as a base\r\n// question one reference - https://colorcodedlyrics.com/2022/12/30/ateez-halazia/\r\n// question two refercne - https://colorcodedlyrics.com/2021/12/09/xdinary-heroes-egseudineoli-hieolojeu-happy-death-day/\r\n// question three reference  - https://colorcodedlyrics.com/2021/12/23/stray-kids-broken-compass-gojangnan-nachimban/\r\n\r\nimport { StyleSheet, View, FlatList } from 'react-native';\r\nimport { Button, CheckBox, Input, Text, ButtonGroup } from '@rneui/themed';\r\nimport * as Font from 'expo-font';\r\nimport { useEffect, useState, useCallback } from 'react';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport { StackActions } from '@react-navigation/native';\r\nimport * as React from 'react';\r\nimport { SafeAreaView } from 'react-native-safe-area-context';\r\n\r\nconst Stack = createNativeStackNavigator()\r\n\r\nasync function cacheFonts(fonts) {\r\n  return fonts.map(async (font) => await Font.loadAsync(font))\r\n}\r\n\r\nconst QUESTION1_SCREEN = \"Question1\"\r\nconst QUESTION2_SCREEN = \"Question2\"\r\nconst QUESTION3_SCREEN = \"Question3\"\r\nconst SUMMARY_SCREEN = \"Summary\"\r\n\r\nexport default function App() {\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)\r\n  const [answeredCount, setAnsweredCount] = useState(0)\r\n  let questions = [\r\n    {\r\n      \"prompt\": \"Q1: Select the best answer: Who are you?\",\r\n      \"type\": \"multiple-choice\",\r\n      \"index\": 0,\r\n      \"key\": \"0\",\r\n      \"choices\": [\r\n        \"It's just me, myself and I\",\r\n        \"거울 속 비친 넌 누구인가\",\r\n        \"기대 안에 기대 이 길의 뒤에\",\r\n        \"All of the above\",\r\n    ],\r\n      \"correct\": 3\r\n    },\r\n    {\r\n      \"prompt\": \"Q2: Fill in the blank: Happy ______ day\",\r\n      \"type\": \"multiple-answer\",\r\n      \"index\": 1,\r\n      \"key\": \"1\",\r\n      \"choices\": [\r\n        \"Birthday\",\r\n        \"Death\",\r\n        \"Best\",\r\n        \"Worst\",\r\n    ],\r\n      \"correct\": [1,3]\r\n    },\r\n    {\r\n      \"prompt\": `Q3: Is the following statment true or false?\\n\r\n        Stray Kids, STAY or none, we're gonna cross the finish line`,\r\n      \"type\": \"true-false\",\r\n      \"index\": 2,\r\n      \"key\": \"2\",\r\n        \"choices\": [\r\n        \"True\",\r\n        \"False\",\r\n    ],\r\n      \"correct\": 0\r\n    },\r\n  ]\r\n    return (\r\n      <NavigationContainer>{\r\n        <Stack.Navigator initialRouteName={QUESTION1_SCREEN}>\r\n          <Stack.Screen name=\"Question1\" component={Question1Screen} initialParams={{questions: questions, currentQuestionIndex: currentQuestionIndex, \r\n            answeredCount: answeredCount}} options={{headerShown: false}}></Stack.Screen>\r\n          <Stack.Screen name=\"Question2\" component={Question2Screen} initialParams={{questions: questions, currentQuestionIndex: currentQuestionIndex, \r\n            answeredCount: answeredCount}} options={{headerShown: false}}></Stack.Screen>\r\n          <Stack.Screen name=\"Question3\" component={Question3Screen} initialParams={{questions: questions, currentQuestionIndex: currentQuestionIndex, \r\n            answeredCount: answeredCount}} options={{headerShown: false}}></Stack.Screen>\r\n          <Stack.Screen name=\"Summary\" component={SummaryScreen} initialParams={{questions: questions, currentQuestionIndex: currentQuestionIndex, \r\n            answeredCount: answeredCount}} options={{headerShown: false}}></Stack.Screen>\r\n        </Stack.Navigator>\r\n    }</NavigationContainer>\r\n  );\r\n}\r\n\r\nfunction check({route}) {\r\n    const { answeredCount } = route.params\r\n    const prevAnsweredCount = React.useRef()\r\n  let checkAnswer = useEffect(() => {\r\n    if (selectedIndex === currentQuestion.correct) {\r\n      answeredCount = prevAnsweredCount + 1\r\n    } else {\r\n      answeredCount = prevAnsweredCount\r\n    }\r\n  })\r\n}\r\n\r\nfunction check2({route}) {\r\n    const { answeredCount } = route.params\r\n    const prevAnsweredCount = React.useRef()\r\n  let checkAnswer = useEffect(() => {\r\n    if (selectedIndexes === currentQuestion.correct) {\r\n      answeredCount = prevAnsweredCount + 1\r\n    } else {\r\n      answeredCount = prevAnsweredCount\r\n    }\r\n  })\r\n}\r\n\r\n\r\nfunction Question1Screen({route, navigation}) {\r\n  const { questions, currentQuestionIndex, answeredCount } = route.params\r\n  let currentQuestion = questions[currentQuestionIndex]\r\n  const [selectedIndex, setSelectedIndex] = useState()\r\n  const handleNextQuestion = () => {\r\n    if (currentQuestionIndex + 1 < questions.length) {\r\n      navigation.push(QUESTION2_SCREEN, {questions, \r\n        currentQuestionIndex: currentQuestionIndex + 1, \r\n        selectedIndex, answeredCount, route})\r\n      setSelectedIndex([])  \r\n    } else {\r\n      check2()\r\n    }    \r\n  }\r\n     return (\r\n    <SafeAreaView>\r\n      <View>\r\n        <Text style={styles.heading}>Quiz</Text>\r\n        <Text style={styles.subheading}>{currentQuestion.prompt}</Text>\r\n        <ButtonGroup buttons={currentQuestion.choices}\r\n          selectedIndex={selectedIndex}\r\n          onPress={(value) => {\r\n            setSelectedIndex(value)\r\n          }}\r\n          containerStyle={{ marginBottom: 20 }}\r\n          vertical>\r\n        </ButtonGroup>\r\n        <Button title=\"Next Question\" testID=\"next-question\" style={styles.button} onPress={handleNextQuestion}></Button>\r\n      </View>\r\n    </SafeAreaView>\r\n  ) \r\n}\r\n\r\nfunction Question2Screen({route, navigation}) {\r\n  const { questions, currentQuestionIndex, answeredCount } = route.params\r\n  let currentQuestion = questions[currentQuestionIndex]\r\n  const [selectedIndexes, setSelectedIndexes] = useState([])\r\n  const handleNextQuestion = () => {\r\n    if (currentQuestionIndex + 1 < questions.length) {\r\n      navigation.push(QUESTION3_SCREEN, {questions, \r\n        currentQuestionIndex: currentQuestionIndex + 1, \r\n        selectedIndexes, answeredCount, route})\r\n      setSelectedIndexes([])  \r\n    } else {\r\n      check()\r\n    }    \r\n  }\r\n  return (\r\n    <SafeAreaView>\r\n      <View>\r\n        <Text style={styles.heading}>Quiz</Text>\r\n        <Text style={styles.subheading}>{currentQuestion.prompt}</Text>\r\n        <ButtonGroup buttons={currentQuestion.choices}\r\n          selectMultiple\r\n          selectedIndexes={selectedIndexes}\r\n          onPress={(value) => {\r\n            setSelectedIndexes(value)\r\n          }}\r\n          containerStyle={{ marginBottom: 20 }}>\r\n        </ButtonGroup> \r\n        <Button title=\"Next Question\" testID=\"next-question\" style={styles.button} onPress={handleNextQuestion}></Button>\r\n      </View>\r\n    </SafeAreaView>\r\n  ) \r\n}\r\n\r\nfunction Question3Screen({route, navigation}) {\r\n  const { questions, currentQuestionIndex, answeredCount } = route.params\r\n  let currentQuestion = questions[currentQuestionIndex]\r\n  const [selectedIndex, setSelectedIndex] = useState()\r\n  const handleNextQuestion = () => {\r\n    if (currentQuestionIndex + 1 < questions.length) {\r\n      navigation.push(SUMMARY_SCREEN, {questions, \r\n        currentQuestionIndex: currentQuestionIndex + 1, \r\n        selectedIndex, answeredCount, route})\r\n      setSelectedIndex([])  \r\n    } else {\r\n      check()\r\n    }    \r\n  }\r\n  console.log(route)\r\n  return (\r\n    <SafeAreaView>\r\n      <View>\r\n        <Text style={styles.heading}>Quiz</Text>\r\n        <Text style={styles.subheading}>{currentQuestion.prompt}</Text>\r\n        <ButtonGroup buttons={currentQuestion.choices}\r\n          selectedIndex={selectedIndex}\r\n          onPress={(value) => {\r\n            setSelectedIndex(value)\r\n          }}\r\n          containerStyle={{ marginBottom: 20 }}>\r\n        </ButtonGroup>  \r\n        <Button title=\"Finish\" style={styles.button} onPress={handleNextQuestion}></Button>\r\n      </View>\r\n    </SafeAreaView>\r\n  ) \r\n}\r\n\r\nfunction SummaryScreen({route, navigation}) {\r\n  const { questions, answeredCount } = route.params\r\n  return (\r\n    <View>\r\n      <Text style={styles.heading}>Summary</Text>\r\n      <Text testID=\"total\" style={styles.subheading}>Quiz Score:{answeredCount}/3</Text>\r\n      <Button title=\"Restart\" style={styles.button} onPress={() => navigation.push(QUESTION1_SCREEN, {questions})}></Button>\r\n    </View>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1, \r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  horizontal: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-around',\r\n    padding: 10,\r\n  },\r\n  button: {\r\n    alignItems: 'center',\r\n    padding: 10,\r\n  },\r\n  buttonGroup: {\r\n    backgroundColor : \"#2089dc\",\r\n    color : \"white\",\r\n    textAlign : \"center\",\r\n    paddingVertical : 5,\r\n    marginBottom : 10\r\n  },\r\n  space: {\r\n    height: 10\r\n  },\r\n  heading: {\r\n    fontSize: 30,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    padding: 20\r\n  },\r\n  subheading: {\r\n    fontSize: 25,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    padding: 20\r\n  }\r\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}