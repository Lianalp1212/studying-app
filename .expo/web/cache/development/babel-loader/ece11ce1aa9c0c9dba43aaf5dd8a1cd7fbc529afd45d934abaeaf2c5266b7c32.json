{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { Button, Input, Text, ButtonGroup } from '@rneui/themed';\nimport { useEffect, useState, useCallback } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as React from 'react';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport * as Font from 'expo-font';\nimport FontAwesome from '@expo/vector-icons/FontAwesome';\nimport { CheckBox } from 'react-native-elements';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction cacheFonts(_x) {\n  return _cacheFonts.apply(this, arguments);\n}\nfunction _cacheFonts() {\n  _cacheFonts = _asyncToGenerator(function* (fonts) {\n    return fonts.map(function () {\n      var _ref8 = _asyncToGenerator(function* (font) {\n        return yield Font.loadAsync(font);\n      });\n      return function (_x2) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n  });\n  return _cacheFonts.apply(this, arguments);\n}\nvar Stack = createNativeStackNavigator();\nvar QUESTION1_SCREEN = \"Question1\";\nvar QUESTION2_SCREEN = \"Question2\";\nvar QUESTION3_SCREEN = \"Question3\";\nvar SUMMARY_SCREEN = \"Summary\";\nvar questions = [{\n  \"prompt\": \"Q1: Select the best answer: Who are you?\",\n  \"type\": \"multiple-choice\",\n  \"index\": 0,\n  \"key\": \"0\",\n  \"choices\": [\"It's just me, myself and I\", \"거울 속 비친 넌 누구인가\", \"기대 안에 기대 이 길의 뒤에\", \"All of the above\"],\n  \"correct\": 3\n}, {\n  \"prompt\": \"Q2: Fill in the blank: Happy ______ day\",\n  \"type\": \"multiple-answer\",\n  \"index\": 1,\n  \"key\": \"1\",\n  \"choices\": [\"Birthday\", \"Death\", \"Best\", \"Worst\"],\n  \"correct\": [1, 3]\n}, {\n  \"prompt\": \"Q3: Is the following statment true or false?\\n\\n        Stray Kids, STAY or none, we're gonna cross the finish line\",\n  \"type\": \"true-false\",\n  \"index\": 2,\n  \"key\": \"2\",\n  \"choices\": [\"True\", \"False\"],\n  \"correct\": 0\n}];\nexport default function App() {\n  cacheFonts([FontAwesome.font]);\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentQuestionIndex = _useState2[0],\n    setCurrentQuestionIndex = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    answeredCount = _useState4[0],\n    setAnsweredCount = _useState4[1];\n  return _jsx(NavigationContainer, {\n    children: _jsxs(Stack.Navigator, {\n      initialRouteName: QUESTION1_SCREEN,\n      children: [_jsx(Stack.Screen, {\n        name: \"Question1\",\n        component: Question1Screen,\n        initialParams: {\n          questions: questions,\n          currentQuestionIndex: currentQuestionIndex,\n          answeredCount: answeredCount\n        },\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Question2\",\n        component: Question2Screen,\n        initialParams: {\n          questions: questions,\n          currentQuestionIndex: currentQuestionIndex,\n          answeredCount: answeredCount\n        },\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Question3\",\n        component: Question3Screen,\n        initialParams: {\n          questions: questions,\n          currentQuestionIndex: currentQuestionIndex,\n          answeredCount: answeredCount\n        },\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Summary\",\n        component: SummaryScreen,\n        initialParams: {\n          questions: questions,\n          currentQuestionIndex: currentQuestionIndex,\n          answeredCount: answeredCount,\n          selectedAnswer: [3, [1, 3], 0]\n        },\n        options: {\n          headerShown: false\n        }\n      })]\n    })\n  });\n}\nfunction check(_ref) {\n  var currentQuestion = _ref.currentQuestion,\n    prevAnsweredCount = _ref.prevAnsweredCount,\n    selectedIndex = _ref.selectedIndex,\n    setAnsweredCount = _ref.setAnsweredCount;\n  if (selectedIndex === currentQuestion.correct) {\n    setAnsweredCount(function (prevAnsweredCount) {\n      return prevAnsweredCount + 1;\n    });\n  } else {\n    setAnsweredCount(prevAnsweredCount);\n  }\n}\nfunction check2(_ref2) {\n  var currentQuestion = _ref2.currentQuestion,\n    prevAnsweredCount = _ref2.prevAnsweredCount,\n    selectedIndexes = _ref2.selectedIndexes,\n    setAnsweredCount = _ref2.setAnsweredCount;\n  if (selectedIndexes.includes(currentQuestion.correct)) {\n    setAnsweredCount(function (prevAnsweredCount) {\n      return prevAnsweredCount + 1;\n    });\n  } else {\n    setAnsweredCount(prevAnsweredCount);\n  }\n}\nfunction Question1Screen(_ref3) {\n  var route = _ref3.route,\n    navigation = _ref3.navigation;\n  var _route$params = route.params,\n    questions = _route$params.questions,\n    currentQuestionIndex = _route$params.currentQuestionIndex,\n    answeredCount = _route$params.answeredCount,\n    selectedAnswer = _route$params.selectedAnswer;\n  var currentQuestion = questions[currentQuestionIndex];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedIndex = _useState6[0],\n    setSelectedIndex = _useState6[1];\n  var handleNextQuestion = function handleNextQuestion() {\n    var nextQuestion = currentQuestionIndex + 1;\n    if (type !== 'multiple-answer') {\n      selectedAnswer.push(selectedIndex);\n    }\n    if (nextQuestion < questions.length) {\n      navigation.push(QUESTION2_SCREEN, {\n        questions: questions,\n        currentQuestionIndex: currentQuestionIndex + 1,\n        selectedIndex: selectedIndex,\n        answeredCount: answeredCount,\n        selectedIndex: selectedIndex\n      });\n    } else {\n      check({\n        currentQuestion: currentQuestion,\n        prevAnsweredCount: answeredCount,\n        selectedIndex: selectedIndex\n      });\n    }\n  };\n  console.log(\"one \" + answeredCount);\n  return _jsx(SafeAreaView, {\n    children: _jsxs(View, {\n      children: [_jsx(Text, {\n        style: styles.heading,\n        children: \"Quiz\"\n      }), _jsx(Text, {\n        style: styles.subheading,\n        children: currentQuestion.prompt\n      }), _jsx(ButtonGroup, {\n        buttons: currentQuestion.choices,\n        selectedIndex: selectedIndex,\n        onPress: function onPress(value) {\n          setSelectedIndex(value);\n        },\n        containerStyle: {\n          marginBottom: 20\n        },\n        vertical: true\n      }), _jsx(Button, {\n        title: \"Next Question\",\n        testID: \"next-question\",\n        style: styles.button,\n        onPress: handleNextQuestion\n      })]\n    })\n  });\n}\nfunction Question2Screen(_ref4) {\n  var route = _ref4.route,\n    navigation = _ref4.navigation;\n  var _route$params2 = route.params,\n    questions = _route$params2.questions,\n    currentQuestionIndex = _route$params2.currentQuestionIndex,\n    answeredCount = _route$params2.answeredCount;\n  var currentQuestion = questions[currentQuestionIndex];\n  var _useState7 = useState([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    selectedIndexes = _useState8[0],\n    setSelectedIndexes = _useState8[1];\n  var handleNextQuestion = function handleNextQuestion() {\n    var nextQuestion = currentQuestionIndex + 1;\n    if (type == 'multiple-answer') {\n      selectedAnswer.push(selectedIndexes);\n    }\n    if (nextQuestion < questions.length) {\n      navigation.push(QUESTION3_SCREEN, {\n        questions: questions,\n        currentQuestionIndex: currentQuestionIndex + 1,\n        selectedIndexes: selectedIndexes,\n        answeredCount: answeredCount\n      });\n    } else {\n      check2({\n        currentQuestion: currentQuestion,\n        prevAnsweredCount: answeredCount,\n        selectedIndexes: selectedIndexes\n      });\n    }\n  };\n  console.log(\"two \" + answeredCount);\n  return _jsx(SafeAreaView, {\n    children: _jsxs(View, {\n      children: [_jsx(Text, {\n        style: styles.heading,\n        children: \"Quiz\"\n      }), _jsx(Text, {\n        style: styles.subheading,\n        children: currentQuestion.prompt\n      }), _jsx(ButtonGroup, {\n        buttons: currentQuestion.choices,\n        selectMultiple: true,\n        selectedIndexes: selectedIndexes,\n        onPress: function onPress(value) {\n          setSelectedIndexes(value);\n        },\n        containerStyle: {\n          marginBottom: 20\n        }\n      }), _jsx(Button, {\n        title: \"Next Question\",\n        testID: \"next-question\",\n        style: styles.button,\n        onPress: handleNextQuestion\n      })]\n    })\n  });\n}\nfunction Question3Screen(_ref5) {\n  var route = _ref5.route,\n    navigation = _ref5.navigation;\n  var _route$params3 = route.params,\n    questions = _route$params3.questions,\n    currentQuestionIndex = _route$params3.currentQuestionIndex,\n    answeredCount = _route$params3.answeredCount,\n    selectedAnswer = _route$params3.selectedAnswer;\n  var currentQuestion = questions[currentQuestionIndex];\n  var _useState9 = useState(0),\n    _useState10 = _slicedToArray(_useState9, 2),\n    selectedIndex = _useState10[0],\n    setSelectedIndex = _useState10[1];\n  var handleFinish = function handleFinish() {\n    var nextQuestion = currentQuestionIndex + 1;\n    if (type !== 'multiple-answer') {\n      selectedAnswer.push(selectedIndex);\n    }\n    if (nextQuestion < questions.length) {\n      navigation.push(SUMMARY_SCREEN, {\n        questions: questions,\n        answeredCount: answeredCount,\n        selectedAnswer: selectedAnswer\n      });\n    }\n  };\n  console.log(\"three \" + answeredCount);\n  return _jsx(SafeAreaView, {\n    children: _jsxs(View, {\n      children: [_jsx(Text, {\n        style: styles.heading,\n        children: \"Quiz\"\n      }), _jsx(Text, {\n        style: styles.subheading,\n        children: currentQuestion.prompt\n      }), _jsx(ButtonGroup, {\n        buttons: currentQuestion.choices,\n        selectedIndex: selectedIndex,\n        onPress: function onPress(value) {\n          setSelectedIndex(value);\n        },\n        containerStyle: {\n          marginBottom: 20\n        }\n      }), _jsx(Button, {\n        title: \"Finish\",\n        style: styles.button,\n        onPress: handleFinish\n      })]\n    })\n  });\n}\nfunction SummaryScreen(_ref6) {\n  var route = _ref6.route,\n    navigation = _ref6.navigation;\n  var _route$params4 = route.params,\n    questions = _route$params4.questions,\n    answeredCount = _route$params4.answeredCount,\n    selectedAnswer = _route$params4.selectedAnswer;\n  var calculateCorrect = function calculateCorrect(userAnswer, correct, type) {\n    var userCorrect = false;\n    if (type == 'multiple-answer') {\n      userCorrect = userAnswer.sort().toString() === correct.sort().toString();\n      userCorrect = userAnswer == correct;\n    }\n    return userCorrect;\n  };\n  var calculateCorrectSet = function calculateCorrectSet(userAnswer, correct, type) {\n    var userCorrect = false;\n    if (type == 'multiple-answer') {\n      userCorrect = correct.every(function (item) {\n        return userAnswer.includes(item);\n      }) && userAnswer.every(function (item) {\n        return correct.includes(item);\n      });\n    } else {\n      userCorrect = userAnswer == correct;\n    }\n    return userAnswer;\n  };\n  var totalScore = 0;\n  for (var i = 0; i < route.params.data.length; i++) {\n    if (calculateCorrect(route.params.selectedAnswer[i], route.params.data[i].correct, route.params.data[i].type)) {\n      totalScore++;\n    }\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(FlatList, {\n      data: route.params.data,\n      renderItem: function renderItem(_ref7) {\n        var item = _ref7.item,\n          index = _ref7.index;\n        var choices = item.choices,\n          prompt = item.prompt,\n          type = item.type,\n          correct = item.correct;\n        var userAnswer = route.params.selectedAnswer[index];\n        var userCorrect = calculateCorrect(userAnswer, correct, type);\n        return _jsxs(View, {\n          children: [_jsx(Text, {\n            children: prompt\n          }), choices.map(function (value, choiceIndex) {\n            var incorrect = false;\n            var userDidSelect = false;\n            if (type == 'multiple-answer') {\n              userDidSelect = userAnswer.includes(choiceIndex);\n              incorrect = userDidSelect && !correct.includes(choiceIndex);\n            } else {\n              userDidSelect = userAnswer == choiceIndex;\n              incorrect = userDidSelect && userAnswer !== correct;\n            }\n            return _jsx(CheckBox, {\n              containerStyle: {\n                backgroundColor: userDidSelect ? incorrect == false ? 'lightgreen' : 'gray' : undefined\n              },\n              checked: type == 'multiple-answer' ? correct.includes(choiceIndex) : correct == choiceIndex,\n              textStyle: {\n                textDecorationLine: incorrect ? 'line-through' : undefined\n              },\n              title: value\n            }, value);\n          })]\n        }, index);\n      }\n    }), _jsxs(Text, {\n      children: [\"Score: \", totalScore]\n    })]\n  });\n}\n{}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  horizontal: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    padding: 10\n  },\n  button: {\n    alignItems: 'center',\n    padding: 10\n  },\n  buttonGroup: {\n    backgroundColor: \"#2089dc\",\n    color: \"white\",\n    textAlign: \"center\",\n    paddingVertical: 5,\n    marginBottom: 10\n  },\n  space: {\n    height: 10\n  },\n  heading: {\n    fontSize: 30,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n    padding: 20\n  },\n  subheading: {\n    fontSize: 25,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n    padding: 20\n  },\n  summary: {\n    fontSize: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n    padding: 15\n  },\n  summaryAnd: {\n    fontSize: 17,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n    padding: 10\n  }\n});","map":{"version":3,"names":["Button","Input","Text","ButtonGroup","useEffect","useState","useCallback","NavigationContainer","createNativeStackNavigator","React","SafeAreaView","Font","FontAwesome","CheckBox","jsx","_jsx","jsxs","_jsxs","cacheFonts","_x","_cacheFonts","apply","arguments","_asyncToGenerator","fonts","map","_ref8","font","loadAsync","_x2","Stack","QUESTION1_SCREEN","QUESTION2_SCREEN","QUESTION3_SCREEN","SUMMARY_SCREEN","questions","App","_useState","_useState2","_slicedToArray","currentQuestionIndex","setCurrentQuestionIndex","_useState3","_useState4","answeredCount","setAnsweredCount","children","Navigator","initialRouteName","Screen","name","component","Question1Screen","initialParams","options","headerShown","Question2Screen","Question3Screen","SummaryScreen","selectedAnswer","check","_ref","currentQuestion","prevAnsweredCount","selectedIndex","correct","check2","_ref2","selectedIndexes","includes","_ref3","route","navigation","_route$params","params","_useState5","_useState6","setSelectedIndex","handleNextQuestion","nextQuestion","type","push","length","console","log","View","style","styles","heading","subheading","prompt","buttons","choices","onPress","value","containerStyle","marginBottom","vertical","title","testID","button","_ref4","_route$params2","_useState7","_useState8","setSelectedIndexes","selectMultiple","_ref5","_route$params3","_useState9","_useState10","handleFinish","_ref6","_route$params4","calculateCorrect","userAnswer","userCorrect","sort","toString","calculateCorrectSet","every","item","totalScore","i","data","container","FlatList","renderItem","_ref7","index","choiceIndex","incorrect","userDidSelect","backgroundColor","undefined","checked","textStyle","textDecorationLine","StyleSheet","create","flex","alignItems","justifyContent","horizontal","flexDirection","padding","buttonGroup","color","textAlign","paddingVertical","space","height","fontSize","summary","summaryAnd"],"sources":["C:/Users/5duck/github-classroom/studying-app/App.js"],"sourcesContent":["// used lab9 as a base\r\n// question one reference - https://colorcodedlyrics.com/2022/12/30/ateez-halazia/\r\n// question two refercne - https://colorcodedlyrics.com/2021/12/09/xdinary-heroes-egseudineoli-hieolojeu-happy-death-day/\r\n// question three reference  - https://colorcodedlyrics.com/2021/12/23/stray-kids-broken-compass-gojangnan-nachimban/\r\n\r\nimport { StyleSheet, View, FlatList } from 'react-native';\r\nimport { Button, Input, Text, ButtonGroup } from '@rneui/themed';\r\nimport { useEffect, useState, useCallback } from 'react';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport * as React from 'react';\r\nimport { SafeAreaView } from 'react-native-safe-area-context';\r\nimport * as Font from 'expo-font';\r\nimport FontAwesome from '@expo/vector-icons/FontAwesome';\r\nimport { CheckBox } from 'react-native-elements';\r\n\r\nasync function cacheFonts(fonts) {\r\n  return fonts.map(async (font) => await Font.loadAsync(font))\r\n}\r\n\r\nconst Stack = createNativeStackNavigator()\r\n\r\nconst QUESTION1_SCREEN = \"Question1\"\r\nconst QUESTION2_SCREEN = \"Question2\"\r\nconst QUESTION3_SCREEN = \"Question3\"\r\nconst SUMMARY_SCREEN = \"Summary\"\r\n\r\nlet questions = [\r\n    {\r\n      \"prompt\": \"Q1: Select the best answer: Who are you?\",\r\n      \"type\": \"multiple-choice\",\r\n      \"index\": 0,\r\n      \"key\": \"0\",\r\n      \"choices\": [\r\n        \"It's just me, myself and I\",\r\n        \"거울 속 비친 넌 누구인가\",\r\n        \"기대 안에 기대 이 길의 뒤에\",\r\n        \"All of the above\",\r\n    ],\r\n      \"correct\": 3\r\n    },\r\n    {\r\n      \"prompt\": \"Q2: Fill in the blank: Happy ______ day\",\r\n      \"type\": \"multiple-answer\",\r\n      \"index\": 1,\r\n      \"key\": \"1\",\r\n      \"choices\": [\r\n        \"Birthday\",\r\n        \"Death\",\r\n        \"Best\",\r\n        \"Worst\",\r\n    ],\r\n      \"correct\": [1,3]\r\n    },\r\n    {\r\n      \"prompt\": `Q3: Is the following statment true or false?\\n\r\n        Stray Kids, STAY or none, we're gonna cross the finish line`,\r\n      \"type\": \"true-false\",\r\n      \"index\": 2,\r\n      \"key\": \"2\",\r\n        \"choices\": [\r\n        \"True\",\r\n        \"False\",\r\n    ],\r\n      \"correct\": 0\r\n    },\r\n  ]\r\n\r\nexport default function App() {\r\n  cacheFonts([FontAwesome.font])\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)\r\n  const [answeredCount, setAnsweredCount] = useState(0)\r\n    return (\r\n      <NavigationContainer>{\r\n        <Stack.Navigator initialRouteName={QUESTION1_SCREEN}>\r\n          <Stack.Screen name=\"Question1\" component={Question1Screen} initialParams={{questions: questions, currentQuestionIndex: currentQuestionIndex, \r\n            answeredCount: answeredCount}} options={{headerShown: false}}></Stack.Screen>\r\n          <Stack.Screen name=\"Question2\" component={Question2Screen} initialParams={{questions: questions, currentQuestionIndex: currentQuestionIndex, \r\n            answeredCount: answeredCount}} options={{headerShown: false}}></Stack.Screen>\r\n          <Stack.Screen name=\"Question3\" component={Question3Screen} initialParams={{questions: questions, currentQuestionIndex: currentQuestionIndex, \r\n            answeredCount: answeredCount}} options={{headerShown: false}}></Stack.Screen>\r\n          <Stack.Screen name=\"Summary\" component={SummaryScreen} initialParams={{questions: questions, currentQuestionIndex: currentQuestionIndex, \r\n            answeredCount: answeredCount, selectedAnswer: [3, [1, 3], 0]}} options={{headerShown: false}}></Stack.Screen>\r\n        </Stack.Navigator>\r\n    }</NavigationContainer>\r\n  );\r\n}\r\n\r\nfunction check({currentQuestion, prevAnsweredCount, selectedIndex, setAnsweredCount}) {\r\n  if (selectedIndex === currentQuestion.correct) {\r\n    setAnsweredCount(prevAnsweredCount => prevAnsweredCount + 1)\r\n  } else {\r\n    setAnsweredCount(prevAnsweredCount)\r\n  }\r\n}\r\n\r\nfunction check2({currentQuestion, prevAnsweredCount, selectedIndexes, setAnsweredCount}) {\r\n  if (selectedIndexes.includes(currentQuestion.correct)) {\r\n    setAnsweredCount(prevAnsweredCount => prevAnsweredCount + 1)\r\n  } else {\r\n    setAnsweredCount(prevAnsweredCount)\r\n  }\r\n}\r\n\r\n\r\nfunction Question1Screen({route, navigation}) {\r\n  const { questions, currentQuestionIndex, answeredCount, selectedAnswer } = route.params\r\n  let currentQuestion = questions[currentQuestionIndex]\r\n  const [selectedIndex, setSelectedIndex] = useState(0)\r\n  const handleNextQuestion = () => {\r\n    let nextQuestion = currentQuestionIndex + 1\r\n    if ( type !== 'multiple-answer') {\r\n      selectedAnswer.push(selectedIndex)\r\n    }\r\n    if (nextQuestion < questions.length) {\r\n      navigation.push(QUESTION2_SCREEN, {questions, \r\n        currentQuestionIndex: currentQuestionIndex + 1, \r\n        selectedIndex, answeredCount, selectedIndex})\r\n    } else {\r\n      check({currentQuestion, prevAnsweredCount: answeredCount, selectedIndex})\r\n    }    \r\n  }\r\n  console.log(\"one \" + answeredCount)\r\n     return (\r\n    <SafeAreaView>\r\n      <View>\r\n        <Text style={styles.heading}>Quiz</Text>\r\n        <Text style={styles.subheading}>{currentQuestion.prompt}</Text>\r\n        <ButtonGroup buttons={currentQuestion.choices}\r\n          selectedIndex={selectedIndex}\r\n          onPress={(value) => {\r\n            setSelectedIndex(value)\r\n          }}\r\n          containerStyle={{ marginBottom: 20 }}\r\n          vertical>\r\n        </ButtonGroup>\r\n        <Button title=\"Next Question\" testID=\"next-question\" style={styles.button} onPress={handleNextQuestion}></Button>\r\n      </View>\r\n    </SafeAreaView>\r\n  ) \r\n}\r\n\r\nfunction Question2Screen({route, navigation}) {\r\n  const { questions, currentQuestionIndex, answeredCount } = route.params\r\n  let currentQuestion = questions[currentQuestionIndex]\r\n  const [selectedIndexes, setSelectedIndexes] = useState([])\r\n  const handleNextQuestion = () => {\r\n    let nextQuestion = currentQuestionIndex + 1\r\n    if ( type == 'multiple-answer') {\r\n      selectedAnswer.push(selectedIndexes)\r\n    }\r\n    if (nextQuestion < questions.length) {\r\n      navigation.push(QUESTION3_SCREEN, {questions, \r\n        currentQuestionIndex: currentQuestionIndex + 1, \r\n        selectedIndexes, answeredCount})\r\n    } else {\r\n      check2({currentQuestion, prevAnsweredCount: answeredCount, selectedIndexes})\r\n    }    \r\n  }\r\n  console.log(\"two \" + answeredCount)\r\n  return (\r\n    <SafeAreaView>\r\n      <View>\r\n        <Text style={styles.heading}>Quiz</Text>\r\n        <Text style={styles.subheading}>{currentQuestion.prompt}</Text>\r\n        <ButtonGroup buttons={currentQuestion.choices}\r\n          selectMultiple\r\n          selectedIndexes={selectedIndexes}\r\n          onPress={(value) => {\r\n            setSelectedIndexes(value)\r\n          }}\r\n          containerStyle={{ marginBottom: 20 }}>\r\n        </ButtonGroup> \r\n        <Button title=\"Next Question\" testID=\"next-question\" style={styles.button} onPress={handleNextQuestion}></Button>\r\n      </View>\r\n    </SafeAreaView>\r\n  ) \r\n}\r\n\r\nfunction Question3Screen({route, navigation}) {\r\n  const { questions, currentQuestionIndex, answeredCount, selectedAnswer} = route.params\r\n  let currentQuestion = questions[currentQuestionIndex]\r\n  const [selectedIndex, setSelectedIndex] = useState(0)\r\n  const handleFinish = () => {\r\n    let nextQuestion = currentQuestionIndex + 1\r\n    if ( type !== 'multiple-answer') {\r\n      selectedAnswer.push(selectedIndex)\r\n    }\r\n    if (nextQuestion < questions.length) {\r\n      navigation.push(SUMMARY_SCREEN, {questions, answeredCount, selectedAnswer})\r\n    }\r\n    \r\n  }    \r\n  console.log(\"three \" + answeredCount)\r\n  return (\r\n    <SafeAreaView>\r\n      <View>\r\n        <Text style={styles.heading}>Quiz</Text>\r\n        <Text style={styles.subheading}>{currentQuestion.prompt}</Text>\r\n        <ButtonGroup buttons={currentQuestion.choices}\r\n          selectedIndex={selectedIndex}\r\n          onPress={(value) => {\r\n            setSelectedIndex(value)\r\n          }}\r\n          containerStyle={{ marginBottom: 20 }}>\r\n        </ButtonGroup>  \r\n        <Button title=\"Finish\" style={styles.button} onPress={handleFinish}></Button>\r\n      </View>\r\n    </SafeAreaView>\r\n  ) \r\n}\r\n\r\nfunction SummaryScreen({route, navigation}) {\r\n  const { questions, answeredCount, selectedAnswer } = route.params\r\n  let calculateCorrect = (userAnswer, correct, type) => {\r\n    let userCorrect = false \r\n    if (type == 'multiple-answer') {\r\n      userCorrect = userAnswer.sort().toString() === correct.sort().toString()\r\n      userCorrect = userAnswer == correct \r\n    }\r\n    return userCorrect\r\n  }\r\n  let calculateCorrectSet = (userAnswer, correct, type) => {\r\n    let userCorrect = false \r\n    if (type == 'multiple-answer') {\r\n      userCorrect = correct.every((item) => userAnswer.includes(item)) &&\r\n      userAnswer.every((item) => correct.includes(item))\r\n    } else {\r\n      userCorrect = userAnswer == correct \r\n    }\r\n    return userAnswer\r\n  }\r\n  let totalScore = 0\r\n  for (let i = 0; i < route.params.data.length; i++) {\r\n    if (calculateCorrect(\r\n      route.params.selectedAnswer[i],\r\n      route.params.data[i].correct,\r\n      route.params.data[i].type\r\n      )\r\n    ) {\r\n      totalScore++\r\n    }\r\n  }\r\n  return (\r\n    <View style={styles.container}>\r\n    <FlatList\r\n    data={route.params.data}\r\n    renderItem={({item, index}) => {\r\n      let { choices, prompt, type, correct } = item\r\n      let userAnswer = route.params.selectedAnswer[index]\r\n      let userCorrect = calculateCorrect(userAnswer, correct, type)\r\n      return (\r\n        <View key={index}>\r\n          <Text>{prompt}</Text>\r\n          {choices.map((value, choiceIndex) => {\r\n            let incorrect = false\r\n            let userDidSelect = false \r\n            if (type == 'multiple-answer') {\r\n              userDidSelect = userAnswer.includes(choiceIndex)\r\n              incorrect = userDidSelect && !correct.includes(choiceIndex)\r\n            } else {\r\n              userDidSelect = userAnswer == choiceIndex\r\n              incorrect = userDidSelect && userAnswer !== correct\r\n            }\r\n            return (\r\n              <CheckBox\r\n              containerStyle={{\r\n                backgroundColor: userDidSelect ? incorrect == false\r\n                  ? 'lightgreen'\r\n                  : 'gray'\r\n                : undefined,\r\n              }}\r\n              checked = {\r\n                type == 'multiple-answer'\r\n                  ? correct.includes(choiceIndex)\r\n                  : correct == choiceIndex\r\n              }\r\n              textStyle={{\r\n                textDecorationLine: incorrect\r\n                  ? 'line-through'\r\n                  : undefined,\r\n              }}\r\n              key={value}\r\n              title={value}\r\n              ></CheckBox>\r\n            )\r\n          })}\r\n        </View>\r\n        )\r\n      }}\r\n    ></FlatList>\r\n    <Text>Score: {totalScore}</Text>\r\n  </View>\r\n  )\r\n}\r\n{/* <View>\r\n      <Text style={styles.heading}>Summary</Text>\r\n      <Text testID=\"total\" style={styles.subheading}>Quiz Score: {answeredCount}/{questions.length}</Text>\r\n      <Text style={styles.summary}>{questions[0].prompt}</Text>\r\n      <Text style={styles.summaryAnd}>{questions[0].choices[0]}</Text>\r\n      <Text style={styles.summaryAnd}>{questions[0].choices[1]}</Text>\r\n      <Text style={styles.summaryAnd}>{questions[0].choices[2]}</Text>\r\n      <Text style={styles.summaryAnd}>{questions[0].choices[3]}</Text>\r\n      <Text style={styles.space}></Text>\r\n      <Text style={styles.summary}>{questions[1].prompt}</Text>\r\n      <Text style={styles.summaryAnd}>{questions[1].choices[0]}</Text>\r\n      <Text style={styles.summaryAnd}>{questions[1].choices[1]}</Text>\r\n      <Text style={styles.summaryAnd}>{questions[1].choices[2]}</Text>\r\n      <Text style={styles.summaryAnd}>{questions[1].choices[3]}</Text>\r\n      <Text style={styles.space}></Text>\r\n      <Text style={styles.summary}>{questions[2].prompt}</Text>\r\n      <Text style={styles.summaryAnd}>{questions[2].choices[0]}</Text>\r\n      <Text style={styles.summaryAnd}>{questions[2].choices[1]}</Text>\r\n      <Button title=\"Restart\" style={styles.button} onPress={() => navigation.push(QUESTION1_SCREEN, {questions})}></Button>\r\n    </View> */}\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1, \r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  horizontal: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-around',\r\n    padding: 10,\r\n  },\r\n  button: {\r\n    alignItems: 'center',\r\n    padding: 10,\r\n  },\r\n  buttonGroup: {\r\n    backgroundColor : \"#2089dc\",\r\n    color : \"white\",\r\n    textAlign : \"center\",\r\n    paddingVertical : 5,\r\n    marginBottom : 10\r\n  },\r\n  space: {\r\n    height: 10\r\n  },\r\n  heading: {\r\n    fontSize: 30,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    padding: 20\r\n  },\r\n  subheading: {\r\n    fontSize: 25,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    padding: 20\r\n  },\r\n  summary: {\r\n    fontSize: 20,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    padding: 15\r\n  },\r\n  summaryAnd: {\r\n    fontSize: 17,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    padding: 10\r\n  }\r\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}